<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Borrow Book</title>
    
    <!-- Include Bootstrap Datepicker CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">

    <!-- Include Bootstrap Datepicker JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
</head>
<body>
    <form id="borrowBookForm">
        <label for="name">Username:</label>
        <input type="text" id="username" readonly><br><br>

        <label for="fullName">Full Name:</label>
        <input type="text" id="fullName" readonly><br><br>

        <label for="book_title">Book Title:</label>
        <input type="text" id="title" readonly><br><br>

        <label for="author">Author:</label>
        <input type="text" id="author" readonly><br><br>

        <label for="date">Date Borrowed:</label>
        <input type="text" id="borrow_date" placeholder="Select Borrow Date"  autocomplete="off" readonly><br><br>

        <label for="date">Return Date:</label>
        <input type="text" id="return_date" placeholder="Select Return Date" autocomplete="off" readonly><br><br>

        <button type="submit">Add Book</button>

        <script>
            var borrow_date; // Define borrow_date variable outside event handler
            var return_date;
            const date = new Date();
            const hours = String(date.getHours()).padStart(2, '0'); // Get hours and pad with leading zero if needed
            const minutes = String(date.getMinutes()).padStart(2, '0'); // Get minutes and pad with leading zero if needed
            const seconds = String(date.getSeconds()).padStart(2, '0'); // Get seconds and pad with leading zero if needed

            const time = `${hours}:${minutes}:${seconds}`; // Concatenate hours, minutes, and seconds

            // Function to compare dates
            function compareDates(borrowedDate, returnedDate) {
                // Remove hyphens and parse substrings to integers
                const borrowParts = borrowedDate.split('-');
                const borrowYear = parseInt(borrowParts[0], 10);
                const borrowMonth = parseInt(borrowParts[1], 10) - 1; // Months are zero-indexed
                const borrowDay = parseInt(borrowParts[2], 10);

                const returnParts = returnedDate.split('-');
                const returnYear = parseInt(returnParts[0], 10);
                const returnMonth = parseInt(returnParts[1], 10) - 1; // Months are zero-indexed
                const returnDay = parseInt(returnParts[2], 10);
                // Concatenate the date components into a single integer
                const borrowDateInt = borrowYear * 10000 + (borrowMonth + 1) * 100 + borrowDay;
                const returnDateInt = returnYear * 10000 + (returnMonth + 1) * 100 + returnDay;
                // Compare the dates
                if (returnDateInt < borrowDateInt) {
                    alert("Invalid date: Return date cannot be earlier than borrow date");
                    $('#return_date').val('');
                    $('#borrow_date').val('')
                    return false; // Invalid date
                } else {
                    return true; // Valid date
                }
            }

            $(document).ready(function() {
                var username = sessionStorage.getItem("username");
                document.getElementById("username").value = username;

                var book_title = sessionStorage.getItem("title");
                document.getElementById("title").value = book_title;
                
                var book_author = sessionStorage.getItem("author");
                document.getElementById("author").value = book_author;

                var last_name = sessionStorage.getItem("last_name");
                var given_name = sessionStorage.getItem("given_name");

                const full_name = last_name + ", " + given_name;
                document.getElementById("fullName").value = full_name;
                // Initialize datepicker for borrow_date input field
                $('#borrow_date').datepicker({
                    format: 'yyyy-mm-dd', // Format the date as YYYY-MM-DD
                    autoclose: true
                }).on('changeDate', function(event) {
                    // Get the selected borrow date
                    borrow_date = event.target.value;
                    compareDates(borrow_date, $('#return_date').val());
                });

                $('#return_date').datepicker({
                    format: 'yyyy-mm-dd', // Format the date as YYYY-MM-DD
                    autoclose: true,
                }).on('changeDate', function(event) {
                    // Get the selected return date
                    return_date = event.target.value;
                    compareDates($('#borrow_date').val(), return_date);
                });

                // document.getElementById('borrowBookForm').addEventListener('submit', function(event){
                //     event.preventDefault();
                    
                //     var return_date = document.getElementById("return_date").value;
                    
                //     // validateInputs(username, full_name, book_author, borrow_date, return_date)
                //     const borrow_form = {username, full_name, book_author, borrow_date, return_date, fine}
                        
                //     fetch('/borrowed', {
                //         method: 'POST',
                //         headers: {
                //             'Content-Type': 'application/json'
                //         },
                //         body: JSON.stringify(borrow_form)
                //     })
                //     .then(response => {
                //         if (!response.ok) {
                //             throw new Error('Failed to add book. Server returned ' + response.status);
                //         }
                //         return response.json();
                //     })
                //     .then(data => {
                //         console.log('Book added successfully:', data);
                //         alert('Book added successfully!');
                //     })
                //     .catch(error => {
                //         console.error('Error:', error);
                //         alert('Failed to add book. Please try again.');
                //     });
                // });
document.getElementById('borrowBookForm').addEventListener('submit', addRequest)
           
    function addRequest(){
    const request_message = `${time}: ${username} requests "${book_title}" to be reserved for ${borrow_date} and will be returned in ${return_date}`
        request_type = "Reserve Request"
        const notification = {time, username, full_name, request_type, request_message, book_title, book_author, borrow_date, return_date}
        fetch('/sentrequests', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
                body: JSON.stringify(notification)
        })
        .then(data => {
                        console.log('Book added successfully:', data);
                        alert('Book added successfully!');
        })
        // .then(response => {
        //     // if (!response.ok) {
        //     //     throw new Error('Failed to send notification. Server returned ' + response.status);
        //     // }
        //     return response.json();
        // })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to send notification. Please try again.');
        });
    }


            });
        </script>
    </form>
</body>
</html>