<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Borrow Book</title>
    
            <!-- Include Bootstrap CSS -->
        <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"> -->

        <!-- Include Bootstrap Datepicker CSS -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">

        <!-- Include Bootstrap Datepicker JS and dependencies -->
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
</head>
<body>
    <form id="borrowBookForm">
        <label for="name">Username:</label>
        <input type="text" id="username" readonly><br><br>

        <label for="fullName">Full Name:</label>
        <input type="text" id="fullName" readonly re><br><br>

        <label for="book_title">Book Title:</label>
        <input type="text" id="title" readonly><br><br>

        <label for="author">Author:</label>
        <input type="text" id="author" readonly><br><br>

        <label for="date">Date Borrowed:</label>
        <input type="text" id="start_date" readonly><br><br>

        <label for="date">Return Date:</label>
        <input type="text" id="return_date" class="form-control" placeholder="Select Return Date" autocomplete="off" readonly><br><br>

        <button type="submit">Add Book</button>

        <script>
            var return_date;
function validateInputs(username, full_name, book_author, borrow_date, return_date){

    if (!username || !full_name || !book_author || !borrow_date || !return_date){
        alert("All fields are required")
        throw new Error('All fields are required.');
    }
}


            //THE PARAMETERS PASSED WITHOUT ANY FORMUALTIONS
            var username = sessionStorage.getItem("username");
            document.getElementById("username").value = username;

            var book_title = sessionStorage.getItem("title");
            document.getElementById("title").value = book_title;
            
            var book_author = sessionStorage.getItem("author");
            document.getElementById("author").value = book_author

            var last_name = sessionStorage.getItem("last_name");
            var given_name = sessionStorage.getItem("given_name");

            const full_name = last_name + ", " + given_name;
            document.getElementById("fullName").value = full_name

            // var fine = 0;
            // //THE DATEPICKER WITH THE USE OF BOOTSTRAP
            // $('#return_date').datepicker({
            // format: 'mm-dd-yyyy', // Format the date as MM-DD-YYYY
            // autoclose: true // Close the datepicker when a date is selected
            // });

            // const date = new Date();
            // const day = String(date.getDate()).padStart(2, '0'); // Get the day of the month (1-31) and pad with leading zero if necessary
            // const month = String(date.getMonth() + 1).padStart(2, '0'); // Get the month (0-11), adding 1 to convert to 1-12 range, and pad with leading zero if necessary
            // const year = date.getFullYear(); 

            // var borrow_date = `${month}-${day}-${year}`;
            // document.getElementById("borrow_date").value = borrow_date;



// Function to compare dates
function compareDates(start_date, return_date) {
    // Remove hyphens and parse substrings to integers
    const borrowParts = start_date.split('-');
    const borrowYear = parseInt(borrowParts[0], 10);
    const borrowMonth = parseInt(borrowParts[1], 10) - 1; // Months are zero-indexed
    const borrowDay = parseInt(borrowParts[2], 10);

    const returnParts = return_date.split('-');
    const returnYear = parseInt(returnParts[0], 10);
    const returnMonth = parseInt(returnParts[1], 10) - 1; // Months are zero-indexed
    const returnDay = parseInt(returnParts[2], 10);
    // Concatenate the date components into a single integer
    const borrowDateInt = borrowYear * 10000 + (borrowMonth + 1) * 100 + borrowDay;
    const returnDateInt = returnYear * 10000 + (returnMonth + 1) * 100 + returnDay;
    // Compare the dates
    if (returnDateInt < borrowDateInt) {
        alert("Invalid date: Return date cannot be earlier than borrow date");
        $('#return_date').val('');
        return false; // Invalid date
    } else {
        return true; // Valid date
    }
}


// Borrow date
const date = new Date();
const day = String(date.getDate()).padStart(2, '0'); 
const month = String(date.getMonth() + 1).padStart(2, '0'); 
const year = date.getFullYear(); 
// const time = (date.getHours()+8, date.getMinutes(), date.getSeconds())
const start_date = `${year}-${month}-${day}`; // Format as YYYY-MM-DD

const hours = String(date.getHours()).padStart(2, '0'); // Get hours and pad with leading zero if needed
const minutes = String(date.getMinutes()).padStart(2, '0'); // Get minutes and pad with leading zero if needed
const seconds = String(date.getSeconds()).padStart(2, '0'); // Get seconds and pad with leading zero if needed

const time = `${hours}:${minutes}:${seconds}`; // Concatenate hours, minutes, and seconds

console.log(time); // Output should be something like: "10:30:25" (depending on the current time)
// Set the borrow date
document.getElementById("start_date").value = start_date;

// Return date
$('#return_date').datepicker({
    format: 'yyyy-mm-dd', // Format the date as YYYY-MM-DD
    autoclose: true,
});

$('#return_date').on('changeDate', function(event) {
    // Get the selected return date
    return_date = event.target.value;
    console.log("Return date selected:", return_date);
    compareDates(start_date, return_date);
});



    // document.getElementById('borrowBookForm').addEventListener('submit', function(event){
    //     event.preventDefault();
        // var book_borrowed = borrow_date;
        // var return_date = document.getElementById("return_date").value;
        // validateInputs(username, full_name, book_author, book_borrowed, return_date)
        
        // const borrow_form = {username, full_name, book_author, book_borrowed, return_date, fine}
            
    //     fetch('/borrowed', {
    //         method: 'POST',
    //         headers: {
    //             'Content-Type': 'application/json'
    //         },
    //             body: JSON.stringify(borrow_form)
    //     })
    //     .then(response => {
    //         if (!response.ok) {
    //             throw new Error('Failed to add book. Server returned ' + response.status);
    //         }
    //         return response.json();
    //     })
    //     .then(data => {
    //         console.log('Book added successfully:', data);
    //         alert('Book added successfully!');
    //     })
    //     .catch(error => {
    //         console.error('Error:', error);
    //         alert('Failed to add book. Please try again.');
    //     });

    // })

document.getElementById('borrowBookForm').addEventListener('submit', addRequest)
function addRequest(){

    var borrow_date = start_date;
        validateInputs(username, full_name, book_author, borrow_date, return_date)
    const request_message = `${time}: ${username} requests "${book_title}" to be borrowed. It will be returned in ${return_date}`
        request_type = "Borrow Request"
        const notification = {time, username, full_name, request_type, request_message, book_title, book_author, borrow_date, return_date}
        fetch('/sentrequests', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
                body: JSON.stringify(notification)
        })
        .then(data => {
                        console.log('Book added successfully:', data);
                        alert('Book added successfully!');
        })
        // .then(response => {
        //     // if (!response.ok) {
        //     //     throw new Error('Failed to send notification. Server returned ' + response.status);
        //     // }
        //     return response.json();
        // })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to send notification. Please try again.');
        });
    }
        </script>
</body>
</html>